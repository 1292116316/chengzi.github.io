/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void traversal(TreeNode* cur,unordered_map<int,int>& map){
        if(cur==NULL)
            return ;
        map[cur->val]++;
        traversal(cur->left,map);
        traversal(cur->right,map);
        return ;
    }
    bool static cmp(const pair<int,int>& a,const pair<int,int>& b){
        return a.second>b.second;
    }
public:
    vector<int> findMode(TreeNode* root) {
        unordered_map<int,int>map;
        vector<int>result;
        if(root==NULL)
            return result;
        traversal(root,map);
        vector<pair<int,int>>vec(map.begin(),map.end());
        sort(vec.begin(),vec.end(),cmp);
        result.push_back(vec[0].first);
        for(int i=1;i<vec.size();i++){
            if(vec[i].second==vec[0].second)
                result.push_back(vec[i].first);
            else
                break;
        }
        return result;
    }
};
class Solution {
private:
    int maxCount=0;
    int count=0;
    TreeNode* pre=NULL;
    vector<int>result;
    void traversal(TreeNode* cur){
        if(cur==NULL)
            return ;
        traversal(cur->left);
        if(pre==NULL){
            count=1;
        }else if(pre->val==cur->val){
            count++;
        }else{
            count=1;
        }
        pre=cur;
        if(count==maxCount)
            result.push_back(cur->val);
        if(count>maxCount){
            maxCount=count;
            result.clear();
            result.push_back(cur->val);
        }
        traversal(cur->right);
        return ;
    }
public:
    vector<int> findMode(TreeNode* root) {
        maxCount=0;
        count=0;
        TreeNode* pre=NULL;
        result.clear();
        traversal(root);
        return result;
    }
};
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        stack<TreeNode*> st;
        TreeNode* cur = root;
        TreeNode* pre = NULL;
        int maxCount = 0; 
        int count = 0; 
        vector<int> result;
        while (cur != NULL || !st.empty()) {
            if (cur != NULL) { 
                st.push(cur); 
                cur = cur->left;              
            } else {
                cur = st.top();
                st.pop();                     
                if (pre == NULL) { 
                    count = 1;
                } else if (pre->val == cur->val) { 
                    count++;
                } else { 
                    count = 1;
                }
                if (count == maxCount) { 
                    result.push_back(cur->val);
                }

                if (count > maxCount) { 
                    maxCount = count;   
                    result.clear();
                    result.push_back(cur->val);
                }
                pre = cur;
                cur = cur->right;              
            }
        }
        return result;
    }
};
