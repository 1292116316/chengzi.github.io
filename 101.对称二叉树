/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归
/* class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==nullptr){
            return true;
        }
        return deepcheck(root->left,root->right);
    }
    bool deepcheck(TreeNode* left,TreeNode* right){
        if(left==nullptr && right==nullptr){
            return true;
        }
        if(left==nullptr || right==nullptr){
            return false;
        }
        if(left->val!=right->val){
            return false;
        }      
        return deepcheck(left->right,right->left)&&deepcheck(left->left,right->right);
    }
}; */
//循环迭代
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        queue<TreeNode*>q;
        TreeNode* u=root->left;
        TreeNode* v=root->right;
        q.push(u); q.push(v);
        while (!q.empty()) {
            u = q.front(); q.pop();
            v = q.front(); q.pop();
            if (!u && !v) continue;
            if ((!u || !v) || (u->val != v->val)) return false;
            q.push(u->left); 
            q.push(v->right);
            q.push(u->right); 
            q.push(v->left);
        }
        return true;
    }
};
