class Solution {
private:
  vector<vector<int>>result;
  vector<int>path;
  void backtracking(vector<int>& nums,int startIndex,vector<bool>& used){
    result.push_back(path);
    if(startIndex>=nums.size())
      return;
    for(int i=startIndex;i<nums.size();i++){
      if(i>0 && nums[i]==nums[i-1] && used[i-1]==false)
        continue;
       path.push_back(nums[i]);
       used[i]=true;
       backtracking(nums,i+1,used);
       used[i]=false;
       path.pop_back();
    }
  }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
       result.clear();
       path.clear();
       vector<bool>used(nums.size(),false);
       sort(nums.begin(),nums.end());
       backtracking(nums,0,used);
       return result;
    }
};
class Solution {
private:
    vector<vector<int>>result;
    vector<int>path;
    void backtracking(vector<int>& nums,int startIndex){
        result.push_back(path);
        unordered_set<int>uset;
        for(int i=startIndex;i<nums.size();i++){
            if(uset.find(nums[i])!=uset.end()){
                continue;
            }
            uset.insert(nums[i]);
            path.push_back(nums[i]);
            backtracking(nums,i+1);
            path.pop_back();
        }
    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        result.clear();
        path.clear();
        unordered_set<int>uset;
        sort(nums.begin(),nums.end());
        backtracking(nums,0);
        return result;
    }
};
class Solution {
private:
  vector<vector<int>>result;
  vector<int>path;
  void backtracking(vector<int>& nums,int startIndex){
    result.push_back(path);
    if(startIndex>=nums.size())
      return;
    for(int i=startIndex;i<nums.size();i++){
      if(i>startIndex&& nums[i]==nums[i-1])
        continue;
       path.push_back(nums[i]);
       backtracking(nums,i+1);
       path.pop_back();
    }
  }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
       result.clear();
       path.clear();
       sort(nums.begin(),nums.end());
       backtracking(nums,0);
       return result;
    }
};
