/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        queue<TreeNode*>que;
        if(root!=NULL)
            que.push(root);
        int depth=0;
        while(!que.empty()){
            int size=que.size(); 
            depth++;
            for(int i=0;i<size;i++){
                TreeNode* Node=que.front();
                que.pop();
                if(Node->left)
                    que.push(Node->left);
                if(Node->right)
                    que.push(Node->right);
                if(Node->left==NULL && Node->right==NULL)
                    return depth;
            }
        }
        return depth;
    }
};
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        if(root->left==NULL && root->right==NULL)
            return 1;
        int minleft=minDepth(root->left);
        int minright=minDepth(root->right);
        if(root->left==NULL || root->right==NULL)
            return minleft+minright+1;   
        return min(minleft,minright)+1;
    }
};
