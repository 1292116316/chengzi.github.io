/*
1、建立堆（按顺序存储进行存储，然后从最后一个非叶子节点进行调整）
2、得到堆顶元素，为最大元素（大根堆）
3、去掉堆顶，将堆最后一个元素放到堆顶（目的是保持调整完依然是完全二叉树），此时可通过一次调整重新使堆有序
4、堆顶元素为第二大元素
5、重复步骤3，直到堆变空
*/
#include<bits/stdc++.h>
using namespace std;

void sift(vector<int>& nums, int root, int last) { 
	/*
	nums 要排序的数组
	root  堆的根节点位置
	last 堆的最后一个位置
	*/
	int i = root; // 指向根节点
	int j = 2 * i + 1; // 指向左孩子
	int temp = nums[root]; // 暂存根节点的数
	while (j <= last) {
		// 如果右孩子有且比左孩子大
		if (j + 1 <= last && nums[j + 1] > nums[j]) { 
			j = j + 1; // 指向右孩子
		}
		if (nums[j] > temp) {
			nums[i] = nums[j];
			i = j; // 往下找一层
			j = 2 * i + 1;
		}
		else {
			nums[i] = temp;
			break;
		}
	}
	nums[i] = temp;
}

void HeapSort(vector<int>& nums) {
	int n = nums.size();
	for (int i = (n - 2) / 2; i >= 0; i--) {
		// i为建堆的时候调整部分的根的下标
		sift(nums, i, n - 1); // 建堆
	}
	for (int i = n - 1; i >= 0; i--) {
		swap(nums[0], nums[i]);
		sift(nums, 0, i - 1);
	}
}

int main() {
	vector<int>nums = { 2, 4, 5, 7, 1, 3, 6, 8 };
	int len = nums.size();
	HeapSort(nums);
	for (int i = 0; i < nums.size(); i++) {
		cout << nums[i] << " ";
	}
	return 0;
}
