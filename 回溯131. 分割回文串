// class Solution {
// private:
//     vector<vector<string>>result;
//     vector<string>path;
//     void backtracking(string s,int startIndex){
//         if(startIndex>=s.size()){
//             result.push_back(path);
//             return;
//         }
//         for(int i=startIndex;i<s.size();i++){
//             if(isPalindrome(s,startIndex,i)){
//                 string str=s.substr(startIndex,i-startIndex+1);
//                 path.push_back(str);
//             }
//             else{
//                 continue;
//             }
//             backtracking(s,i+1);
//             path.pop_back();
//         }
//     }
//     bool isPalindrome(const string& s,int start,int end){
//         for(int i=start,j=end;i<j;i++,j--){
//             if(s[i]!=s[j]){
//                 return false;
//             }
//         }
//         return true;
//     }
// public:
//     vector<vector<string>> partition(string s) {
//         result.clear();
//         path.clear();
//         backtracking(s,0);
//         return result;
//     }
// };
class Solution {
private:
    vector<vector<string>> result;
    vector<string> path; 
    vector<vector<bool>> isPalindrome; 
    void backtracking (const string& s, int startIndex) {
        if (startIndex >= s.size()) {
            result.push_back(path);
            return;
        }
        for (int i = startIndex; i < s.size(); i++) {
            if (isPalindrome[startIndex][i]) {
                string str = s.substr(startIndex, i - startIndex + 1);
                path.push_back(str);
            } else {  
                continue;
            }
            backtracking(s, i + 1); 
            path.pop_back();
        }
    }
    void computePalindrome(const string& s) {
        isPalindrome.resize(s.size(), vector<bool>(s.size(), false));
        for (int i = s.size() - 1; i >= 0; i--) {
            for (int j = i; j < s.size(); j++) {
                if (j == i) {isPalindrome[i][j] = true;}
                else if (j - i == 1) {isPalindrome[i][j] = (s[i] == s[j]);}
                else {isPalindrome[i][j] = (s[i] == s[j] && isPalindrome[i+1][j-1]);}
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        result.clear();
        path.clear();
        computePalindrome(s);
        backtracking(s, 0);
        return result;
    }
};
