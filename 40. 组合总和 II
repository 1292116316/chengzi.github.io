class Solution {
private:
    vector<vector<int>>result;
    vector<int>path;
    void backtracking(vector<int>& candidates,int target,int sum,int startIndex,vector<bool>& check){
        if(sum==target){
            result.push_back(path);
            return;
        }
        for(int i=startIndex;i<candidates.size() && sum+candidates[i]<=target;i++){
            if(i>0 && candidates[i]==candidates[i-1] && check[i-1]==false){
                continue;
            }
            sum+=candidates[i];
            path.push_back(candidates[i]);
            check[i]=true;
            backtracking(candidates,target,sum,i+1,check);
            check[i]=false;
            path.pop_back();
            sum-=candidates[i];
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<bool>check(candidates.size(),false);
        result.clear();
        path.clear();
        sort(candidates.begin(),candidates.end());
        backtracking(candidates,target,0,0,check);
        return result;
    }
};
