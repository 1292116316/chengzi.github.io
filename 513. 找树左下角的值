/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth=INT_MIN;
    int result;
    void traversal(TreeNode* root,int depth){
        if(root->left==NULL && root->right==NULL){
            if(depth>maxDepth){
                maxDepth=depth;
                result=root->val;
            }
            return ;
        }
        if(root->left)
            traversal(root->left,depth+1);
        if(root->right)
            traversal(root->right,depth+1);
        return ;
    }
    int findBottomLeftValue(TreeNode* root) {
        traversal(root,0);
        return result;
    }
};
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*>que;
        if(root==NULL)
            return 0;
        que.push(root);
        int result;
        while(!que.empty()){
            int size=que.size();
            for(int i=0;i<size;i++){
                TreeNode* Node=que.front();
                que.pop();
                if(i==0)
                    result=Node->val;
                if(Node->left)
                    que.push(Node->left);
                if(Node->right)
                    que.push(Node->right);
            }
        }
        return result;
    }
};
