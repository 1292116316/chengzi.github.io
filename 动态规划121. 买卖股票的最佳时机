//动态规划
/* class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int　length=prices.size();
        if(length<2){
            return 0;
        }
        int dp[length][2];
        dp[0][0]=0;
        dp[0][1]=-prices[0];
        for(int i=1;i<length;i++){
            dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1]=max(dp[i-1][1],-prices[i]);
        }
        return dp[length-1][0];
    }
}; */
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()<2)return 0;
        int promit=0;
        int min=prices[0];
        for(int i=1;i<prices.size();++i){
            if(prices[i]>min){
                promit=max(promit,prices[i]-min);
            }else{
                min=prices[i];
            }
        }
        return promit;
    }
};
