/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    TreeNode* traversal(TreeNode* cur,TreeNode*p,TreeNode* q){
        if(cur==NULL)return cur;
        if(cur->val>p->val && cur->val>q->val){
            TreeNode*left=traversal(cur->left,p,q);
            if(left!=NULL)
                return left;
        }
        if(cur->val<p->val && cur->val<q->val){
            TreeNode*right=traversal(cur->right,p,q);
            if(right!=NULL)
                return right;
        }
        return cur;
    }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        return traversal(root,p,q);
    }
};
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root->val>p->val && root->val>q->val)
            return lowestCommonAncestor(root->left,p,q);
        else if(root->val<p->val && root->val<q->val)
            return lowestCommonAncestor(root->right,p,q);
        else return root;
    }
};
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        while(root){
            if(root->val>p->val && root->val>q->val)
                return lowestCommonAncestor(root->left,p,q);
            if(root->val<p->val && root->val<q->val)
                return lowestCommonAncestor(root->right,p,q);
            return root;
        }
        return NULL;
    }
};
