/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* parent;
    void traversal(TreeNode* cur,int val){
        if(cur==NULL){
            TreeNode* Node=new TreeNode(val);
            if(val>parent->val)parent->right=Node;
            else parent->left=Node;
            return ;
        }
        parent=cur;
        if(cur->val>val)return traversal(cur->left,val);
        if(cur->val<val)return traversal(cur->right,val);
        return ;
    }
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        parent=new TreeNode(0);
        if(root==NULL)
            root=new TreeNode(val);
        traversal(root,val);
        return root;
    }
};
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root==NULL){
            TreeNode* Node=new TreeNode(val);
            return Node;
        }
        TreeNode* cur=root;
        TreeNode* parent=root;
        while(cur!=NULL){
            parent=cur;
            if(cur->val>val)cur=cur->left;
            else cur=cur->right;
        }
        TreeNode* Node=new TreeNode(val);
        if(val<parent->val)parent->left=Node;
        else parent->right=Node;
        return root;
    }
};
