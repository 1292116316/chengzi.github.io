/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int minValue=INT_MAX;
    TreeNode* pre=NULL;
    void traversal(TreeNode* cur){
        if(cur==NULL)
            return ;
        traversal(cur->left);
        if(pre!=NULL){
            minValue=min(minValue,cur->val-pre->val);
        }
        pre=cur;
        traversal(cur->right);
    }
public:
    int getMinimumDifference(TreeNode* root) {
        traversal(root);
        return minValue;
    }
};
class Solution {
private:
    vector<int>result;
    void traversal(TreeNode* root){
        if(root==NULL)
            return ;
        traversal(root->left);
        result.push_back(root->val);
        traversal(root->right);
    }
public:
    int getMinimumDifference(TreeNode* root) {
        result.clear();
        traversal(root);
        if(result.size()<2)return 0;
        int minValue=INT_MAX;
        for(int i=1;i<result.size();i++){
            minValue=min(minValue,result[i]-result[i-1]);
        }
        return minValue;
    }
};
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        stack<TreeNode*>st;
        int minValue=INT_MAX;
        TreeNode* cur=root;
        TreeNode* pre=NULL;
        while(!st.empty() || cur!=NULL){
            if(cur!=NULL){
                st.push(cur);
                cur=cur->left;
            }else{
                cur=st.top();
                st.pop();
                if(pre!=NULL){
                    minValue=min(minValue,cur->val-pre->val);
                }
                pre=cur;
                cur=cur->right;
            }
        }
        return minValue;
    }
};
