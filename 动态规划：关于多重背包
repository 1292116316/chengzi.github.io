多重背包
    问题描述：有N种物品和一个容量为V 的背包。第i种物品最多有Mi件可用，每件耗费的空间是Ci，价值是Wi。
    求解将哪些物品装入背包可使这些物品的耗费的空间 总和不超过背包容量，且价值总和最大。
    每件物品最多有Mi件可用，把Mi件摊开，其实就是一个01背包问题了。
    这种方式来实现多重背包的代码如下：
    void test_multi_pack() {
        vector<int> weight = {1, 3, 4};
        vector<int> value = {15, 20, 30};
        vector<int> nums = {2, 3, 2};
        int bagWeight = 10;
        for (int i = 0; i < nums.size(); i++) {
            while (nums[i] > 1) { // nums[i]保留到1，把其他物品都展开
                weight.push_back(weight[i]);
                value.push_back(value[i]);
                nums[i]--;
            }
        }
        vector<int> dp(bagWeight + 1, 0);
        for(int i = 0; i < weight.size(); i++) { // 遍历物品
            for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
                dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
            }
            for (int j = 0; j <= bagWeight; j++) {
                cout << dp[j] << " ";
            }
            cout << endl;
        }
        cout << dp[bagWeight] << endl;

    }
    int main() {
        test_multi_pack();
    }
    时间复杂度：O(m × n × k)，m：物品种类个数，n背包容量，k单类物品数量
    也有另一种实现方式，就是把每种商品遍历的个数放在01背包里面在遍历一遍。
    代码如下：（详看注释）
    void test_multi_pack() {
    vector<int> weight = {1, 3, 4};
    vector<int> value = {15, 20, 30};
    vector<int> nums = {2, 3, 2};
    int bagWeight = 10;
    vector<int> dp(bagWeight + 1, 0);
    for(int i = 0; i < weight.size(); i++) { // 遍历物品
        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
            // 以上为01背包，然后加一个遍历个数
            for (int k = 1; k <= nums[i] && (j - k * weight[i]) >= 0; k++) { // 遍历个数
                dp[j] = max(dp[j], dp[j - k * weight[i]] + k * value[i]);
            }
        }
        // 打印一下dp数组
        for (int j = 0; j <= bagWeight; j++) {
            cout << dp[j] << " ";
        }
        cout << endl;
        }
        cout << dp[bagWeight] << endl;
    }
    int main() {
        test_multi_pack();
    }
    时间复杂度：O(m × n × k)，m：物品种类个数，n背包容量，k单类物品数量
    
