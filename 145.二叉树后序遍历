/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归
/* class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>list;
        accesstree(root,list);
        return list;
    }
    void accesstree(TreeNode*root,vector<int>&list){
        if(root==nullptr){
            return;
        }
        accesstree(root->left,list);
        accesstree(root->right,list);
        list.push_back(root->val);
    }
}; */
//迭代
/* class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        stack<TreeNode*>list;
        vector<int>res;
        TreeNode* access=nullptr;
        while(root!=nullptr || !list.empty()){
            while(root!=nullptr){
                list.push(root);
                root=root->left;
            }
            root=list.top();
            list.pop();
            if(root->right==nullptr || root->right==access){
                res.push_back(root->val);
                access=root;
                root=nullptr;
            }else{
                list.push(root);
                root=root->right;
            }
        }
        return res;
    }
}; */
//Morris遍历
class Solution {
public:
    void addPath(vector<int> &vec, TreeNode *node) {
        int count = 0;
        while (node != nullptr) {
            ++count;
            vec.emplace_back(node->val);
            node = node->right;
        }
        reverse(vec.end() - count, vec.end());
    }

    vector<int> postorderTraversal(TreeNode *root) {
        vector<int> res;
        if (root == nullptr) {
            return res;
        }
        TreeNode *p1 = root, *p2 = nullptr;
        while (p1 != nullptr) {
            p2 = p1->left;
            if (p2 != nullptr) {
                while (p2->right != nullptr && p2->right != p1) {
                    p2 = p2->right;
                }
                if (p2->right == nullptr) {
                    p2->right = p1;
                    p1 = p1->left;
                    continue;
                } else {
                    p2->right = nullptr;
                    addPath(res, p1->left);
                }
            }
            p1 = p1->right;
        }
        addPath(res, root);
        return res;
    }
};
